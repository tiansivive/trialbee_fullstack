input AddUserInput {
  name: String!
  address: String!
  email: String!
  status: String!
  age: Int!
  image: String!
  clientMutationId: String
}

type AddUserPayload {
  userEdge: UserEdge
  viewer: Admin
  clientMutationId: String
}

# The administrator who uses the app
type Admin implements Node {
  # The ID of an object
  id: ID!

  # User list
  users(order: Order = {}, match: Match = {}, after: String, first: Int, before: String, last: Int): UserConnection
}

input EditUserInput {
  id: ID!
  name: String!
  address: String!
  email: String!
  status: String!
  age: Int!
  clientMutationId: String
}

type EditUserPayload {
  user: User
  clientMutationId: String
}

input Match {
  age: Int
  name: String
  address: String
  email: String
  status: String
}

type Mutation {
  addUser(input: AddUserInput!): AddUserPayload
  removeUser(input: RemoveUserInput!): RemoveUserPayload
  editUser(input: EditUserInput!): EditUserPayload
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

input Order {
  field: String
  direction: String
  baseline: String
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Query {
  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
  viewer: Admin
}

input RemoveUserInput {
  id: ID!
  clientMutationId: String
}

type RemoveUserPayload {
  viewer: Admin
  deletedId: ID
  clientMutationId: String
}

# The users that are managed
type User implements Node {
  # The ID of an object
  id: ID!

  # Users's name
  name: String

  # User's address
  address: String

  # Users's email
  email: String

  # Users's age
  age: Int

  # Users's current status
  status: String

  # Users's image url
  image: String
}

# A connection to a list of items.
type UserConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [UserEdge]
}

# An edge in a connection.
type UserEdge {
  # The item at the end of the edge
  node: User

  # A cursor for use in pagination
  cursor: String!
}
